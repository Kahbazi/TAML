{
  "README.html": {
    "href": "README.html",
    "title": "Official Documentation for TAML - Tab Annotated Markup Language | TAML",
    "keywords": "Official Documentation for TAML - Tab Annotated Markup Language See index.md for the start of the documentation"
  },
  "articles/interpreters/dotnet.html": {
    "href": "articles/interpreters/dotnet.html",
    "title": ".NET | TAML",
    "keywords": ".NET The .NET parser is available to allow you to read a TAML document and navigate it as a complex object tree. There are TAMLArrays, TAMLValues, and TAMLKeyValuePairs that describe each of the appopriate TAML data structures in your document. Install from NuGet TBD Example Code Parsing a document var doc = TAML.Parser.Parse(new StreamReader(\"SomeFile.taml\")); // Access the 3rd element in the array of objects // under the root element and report it's name doc.rootElement[2].Name; Traversing a document"
  },
  "articles/test_suite.html": {
    "href": "articles/test_suite.html",
    "title": "The TAML Test Suite | TAML",
    "keywords": "The TAML Test Suite To ensure compatibility between tools working with TAML files, we have provided a standard test suite of documents that help define the various levels of support. Test Suite files reside in the /test_suite folder of the GitHub repository and are reproduced below with descriptions of how they should each be interpreted Naming Convention Compatibility levels are defined with teh first digit of the test suite file name, followed by an index number, a brief description, and the standard .taml file extension. 1_01_keyvaluepairs.taml Compatibility Level 1 The initial release of the TAML specification is supported by these test suite definitions that provide the foundation of TAML interactions 1_01 - KeyValuePairs The first test ensures that the first two tenets of TAML are met and enforced: New entries are separated by carriage returns (CR / CRLF) Keys and values are separated by 1+ tab characters (\\t) There are 4 entries that should each be recognized as a key/value pair. New entries are presented on new lines and each key/value pair is separated by one or more tab (\\t) characters. key1 value1 key2 value2 key3 value3 key4 value4 1_02 - Arrays"
  },
  "articles/interpreters/javascript.html": {
    "href": "articles/interpreters/javascript.html",
    "title": "JavaScript | TAML",
    "keywords": "JavaScript Not available yet: Issue 2"
  },
  "index.html": {
    "href": "index.html",
    "title": "About | TAML",
    "keywords": "About TAML - Tab Annotated Markup Language Defining the coolest and simplest markup language delimited ONLY by tabs and carriage returns All TAML documents adhere to these rules STRICTLY: New entries are separated by carriage returns (CR / CRLF) Keys and values are separated by 1+ tab characters (\\t) Subkeys are defined on a line starting with 1+ tab characters (\\t) An array is a key with multiple child values Presence of space characters for delimiting are illegal See the Articles to Get Started, to review the specification, learn more about the available parsers and to review some sample TAML documents."
  },
  "articles/interpreters/python.html": {
    "href": "articles/interpreters/python.html",
    "title": "python | TAML",
    "keywords": "python Issue 3"
  },
  "articles/README.html": {
    "href": "articles/README.html",
    "title": "TAML | TAML",
    "keywords": "TAML Specification TAML attempts to provide a very simple message format that can be used for network communications or hierarchical configuration storage on disk. It is defined by these 5 simple rules: New entries are separated by carriage returns (CR / CRLF) Keys and values are separated by 1+ tab characters (\\t) Subkeys are defined on a line starting with 1+ tab characters (\\t) An array is a key with multiple child values Presence of space characters are illegal A test suite of documents is available at the root of the GitHub repository and more information is provided in the Test Suite documentation topic . Available Interpreters dotNET python Mockups of Well-Known Documents as TAML Package.JSON -- Node Package Format Appsettings.JSON -- .NET Configuration Format kubernetes configuration.yml workflow.yml -- GitHub Action specification in YAML"
  }
}